// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuanLyKhoaCNTTUEF.Data;

#nullable disable

namespace QuanLyKhoaCNTTUEF.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230318070635_SeedUser")]
    partial class SeedUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "067eb158-f812-4491-9be9-0f141cd9c35a",
                            ConcurrencyStamp = "310bfeb6-780e-46e3-ae2b-df95ca180176",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = "a7cf0dcf-bb35-4250-90e7-46f64eb60973",
                            ConcurrencyStamp = "f04619c9-f81d-47c6-8d72-0266de16362b",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = "afe1f6ec-b5e3-4b18-b8ae-02f3536e76df",
                            ConcurrencyStamp = "0a592259-33c9-431f-a040-4c04bce1e8d8",
                            Name = "Teacher",
                            NormalizedName = "Teacher"
                        },
                        new
                        {
                            Id = "8e521788-f42d-4ce2-98c9-fe8a3020d5b3",
                            ConcurrencyStamp = "3d1d3238-90f3-4d69-b6bd-99370e87d694",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        },
                        new
                        {
                            Id = "0c48841e-ee61-4427-9133-e70396f8fcd1",
                            ConcurrencyStamp = "0d727cde-ba7f-4dd5-a2eb-f9fc20c6ec6f",
                            Name = "Student",
                            NormalizedName = "Student"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlAvartar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.DanhSachThongTin", b =>
                {
                    b.Property<string>("IDNhom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DiaChiHienTai")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HoVaTen")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IDGiaoVien")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IDKhoa")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IDSinhVien")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IDTask")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nganh")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("SoDienThoai")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IDNhom");

                    b.ToTable("DanhSachThongTin");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.DetailTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AssignedGroupId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("KetQua")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MemberGroupID")
                        .HasColumnType("int");

                    b.Property<int?>("MembersGroupID")
                        .HasColumnType("int");

                    b.Property<string>("MoTa")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("TaskID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupID");

                    b.HasIndex("MemberGroupID");

                    b.HasIndex("TaskID");

                    b.ToTable("DetailTask");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Event", b =>
                {
                    b.Property<int?>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("EventID"), 1L, 1);

                    b.Property<string>("IDNguoiCapNhat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoTa")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("NgayBD")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayCapNhat")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayKT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlanID")
                        .HasColumnType("int");

                    b.Property<string>("TenSuKien")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.Property<int>("XoaTam")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("PlanID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Files.PdfFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateUpload")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanID");

                    b.ToTable("PdfFile");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Group", b =>
                {
                    b.Property<int?>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("GroupID"), 1L, 1);

                    b.Property<int?>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("MoTa")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("NgayCapNhat")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenNhom")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GroupID");

                    b.HasIndex("EventID");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.MembersGroups", b =>
                {
                    b.Property<int>("MemberGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberGroupID"), 1L, 1);

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MemberGroupID");

                    b.HasIndex("GroupID");

                    b.HasIndex("TaskID");

                    b.HasIndex("UserID");

                    b.ToTable("MembersGroups");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Plan", b =>
                {
                    b.Property<int?>("PlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PlanID"), 1L, 1);

                    b.Property<DateTime>("NgayDuyet")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTrinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiDuyet")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NguoiTrinh")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenKeHoach")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlanID");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Tasks", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskID"), 1L, 1);

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("MoTa")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("NgayBD")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayKT")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenTask")
                        .HasColumnType("varchar(50)");

                    b.HasKey("TaskID");

                    b.HasIndex("EventID");

                    b.HasIndex("GroupID");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuanLyKhoaCNTTUEF.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuanLyKhoaCNTTUEF.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyKhoaCNTTUEF.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuanLyKhoaCNTTUEF.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.DetailTask", b =>
                {
                    b.HasOne("QuanLyKhoaCNTTUEF.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("QuanLyKhoaCNTTUEF.Models.MembersGroups", "MembersGroups")
                        .WithMany()
                        .HasForeignKey("MemberGroupID");

                    b.HasOne("QuanLyKhoaCNTTUEF.Models.Tasks", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("MembersGroups");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Event", b =>
                {
                    b.HasOne("QuanLyKhoaCNTTUEF.Models.Plan", "Plan")
                        .WithMany("Events")
                        .HasForeignKey("PlanID");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Files.PdfFile", b =>
                {
                    b.HasOne("QuanLyKhoaCNTTUEF.Models.Plan", "Plan")
                        .WithMany("PdfFiles")
                        .HasForeignKey("PlanID");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Group", b =>
                {
                    b.HasOne("QuanLyKhoaCNTTUEF.Models.Event", "Event")
                        .WithMany("Groups")
                        .HasForeignKey("EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.MembersGroups", b =>
                {
                    b.HasOne("QuanLyKhoaCNTTUEF.Models.Group", "Group")
                        .WithMany("MembersGroups")
                        .HasForeignKey("GroupID");

                    b.HasOne("QuanLyKhoaCNTTUEF.Models.Tasks", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID");

                    b.HasOne("QuanLyKhoaCNTTUEF.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("MembersGroups")
                        .HasForeignKey("UserID");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Group");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Tasks", b =>
                {
                    b.HasOne("QuanLyKhoaCNTTUEF.Models.Event", "Event")
                        .WithMany("Tasks")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyKhoaCNTTUEF.Models.Group", null)
                        .WithMany("Tasks")
                        .HasForeignKey("GroupID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Data.ApplicationUser", b =>
                {
                    b.Navigation("MembersGroups");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Event", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Group", b =>
                {
                    b.Navigation("MembersGroups");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("QuanLyKhoaCNTTUEF.Models.Plan", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("PdfFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
